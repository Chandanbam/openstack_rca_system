name: OpenStack RCA System CI/CD Pipeline

on:
  push:
    branches: [ main, deploy ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.10'
  MLFLOW_EXPERIMENT_NAME: 'openstack_rca_system_prod'
  DOCKER_IMAGE: 'openstack-rca-system'
  ECS_CLUSTER: 'openstack-rca-cluster'
  ECS_SERVICE: 'openstack-rca-service'

jobs:
  train-and-mlflow:
    name: Train Model & Deploy to MLflow
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install training dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-base.txt
        pip install -r requirements-mlflow.txt
        
    - name: Download NLTK data
      run: |
        python -c "
        import nltk
        nltk.download('punkt')
        nltk.download('stopwords')
        nltk.download('wordnet')
        print('✅ NLTK data downloaded successfully')
        "
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
        
    - name: Set up environment variables
      run: |
        echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> $GITHUB_ENV
        echo "MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}" >> $GITHUB_ENV
        echo "MLFLOW_ARTIFACT_ROOT=${{ secrets.MLFLOW_ARTIFACT_ROOT }}" >> $GITHUB_ENV
        echo "MLFLOW_S3_ENDPOINT_URL=${{ secrets.MLFLOW_S3_ENDPOINT_URL }}" >> $GITHUB_ENV
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" >> $GITHUB_ENV
        # Disable CUDA/GPU for CI/CD
        echo "CUDA_VISIBLE_DEVICES=-1" >> $GITHUB_ENV
        echo "TF_CPP_MIN_LOG_LEVEL=2" >> $GITHUB_ENV
        echo "TF_USE_LEGACY_KERAS=True" >> $GITHUB_ENV
        
    - name: Train model and deploy to MLflow/S3
      run: |
        # Train the model and deploy to MLflow/S3
        python main.py --mode train --enable-mlflow --mlflow-experiment ${{ env.MLFLOW_EXPERIMENT_NAME }}
        
        # Verify model deployment
        python -c "
        from mlflow_integration.mlflow_manager import MLflowManager
        from config.config import Config
        
        mgr = MLflowManager(
            tracking_uri=Config.MLFLOW_TRACKING_URI,
            experiment_name='${{ env.MLFLOW_EXPERIMENT_NAME }}'
        )
        
        if mgr.is_enabled:
            model = mgr.load_model_with_versioning(model_name='lstm_model', version='latest')
            if model:
                print('✅ Model successfully deployed to MLflow & S3')
            else:
                print('❌ Model deployment verification failed')
                exit(1)
        else:
            print('❌ MLflow not enabled')
            exit(1)
        "
        
        # Log deployment info
        echo "🚀 Model deployed to MLflow experiment: ${{ env.MLFLOW_EXPERIMENT_NAME }}"
        echo "📦 S3 location: ${{ secrets.MLFLOW_ARTIFACT_ROOT }}"
        echo "🔗 MLflow URI: ${{ secrets.MLFLOW_TRACKING_URI }}"
        
    - name: Upload MLflow artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mlflow-artifacts
        path: |
          mlflow-artifacts/
          models/
          logs/
        retention-days: 7
        
    - name: Create training summary
      run: |
        echo "## 🤖 Training & MLflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Completed:" >> $GITHUB_STEP_SUMMARY
        echo "- Model training completed" >> $GITHUB_STEP_SUMMARY
        echo "- Model logged to MLflow" >> $GITHUB_STEP_SUMMARY
        echo "- Model deployed to S3" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Artifacts:" >> $GITHUB_STEP_SUMMARY
        echo "- MLflow Experiment: ${{ env.MLFLOW_EXPERIMENT_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- S3 Location: ${{ secrets.MLFLOW_ARTIFACT_ROOT }}" >> $GITHUB_STEP_SUMMARY
        echo "- Model Version: Latest" >> $GITHUB_STEP_SUMMARY

  test-rca-rag:
    name: Test RCA & RAG Evaluation
    needs: train-and-mlflow
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        
    - name: Download NLTK data
      run: |
        python -c "
        import nltk
        nltk.download('punkt')
        nltk.download('stopwords')
        nltk.download('wordnet')
        print('✅ NLTK data downloaded successfully')
        "
        
    - name: Download MLflow artifacts
      uses: actions/download-artifact@v4
      with:
        name: mlflow-artifacts
        path: ./
        
    - name: Run basic artifact tests
      run: |
        echo "🧪 Running basic artifact tests..."
        python -m pytest tests/test_artifacts.py -v
        
    - name: Run RCA evaluation tests
      run: |
        echo "🔍 Running RCA evaluation tests..."
        python -m pytest tests/test_rca_evaluation.py -v
        
    - name: Run RAG evaluation script
      run: |
        # Create .env file with secrets for RAG evaluation
        cat > .env << EOF
        ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
        MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}
        MLFLOW_ARTIFACT_ROOT=${{ secrets.MLFLOW_ARTIFACT_ROOT }}
        MLFLOW_S3_ENDPOINT_URL=${{ secrets.MLFLOW_S3_ENDPOINT_URL }}
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}
        EOF
        
        # Run comprehensive RAG evaluation using the runner script
        python tests/run_rag_evaluation.py --output-dir rag_evaluation_results --verbose
        
    - name: Run integration tests
      run: |
        # Create .env file with secrets for integration tests
        cat > .env << EOF
        ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
        MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}
        MLFLOW_ARTIFACT_ROOT=${{ secrets.MLFLOW_ARTIFACT_ROOT }}
        MLFLOW_S3_ENDPOINT_URL=${{ secrets.MLFLOW_S3_ENDPOINT_URL }}
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}
        EOF
        
        # Run model performance tests
        python main.py --mode test-ml-model --custom-query "Database connection timeout" --iterations 2
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test-results/
          pytest-results.xml
          coverage.xml
          rag_evaluation_results/
        retention-days: 7
        
    - name: Create test summary
      run: |
        echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Tests Completed:" >> $GITHUB_STEP_SUMMARY
        echo "- Basic artifact tests" >> $GITHUB_STEP_SUMMARY
        echo "- RCA evaluation tests" >> $GITHUB_STEP_SUMMARY
        echo "- RAG evaluation" >> $GITHUB_STEP_SUMMARY
        echo "- Integration tests" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Results:" >> $GITHUB_STEP_SUMMARY
        echo "- Test artifacts uploaded" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage reports generated" >> $GITHUB_STEP_SUMMARY

  docker-build-push:
    name: Build Docker Image & Push
    needs: test-rca-rag
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download test artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-results
        path: ./test-results/
        
    - name: Download MLflow artifacts
      uses: actions/download-artifact@v4
      with:
        name: mlflow-artifacts
        path: ./mlflow-artifacts/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and test Docker image
      run: |
        echo "🐳 Building Docker image..."
        docker build -t openstack-rca-system:${{ github.sha }} .
        
        # Create .env file for Docker test
        cat > .env << EOF
        ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
        MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}
        MLFLOW_ARTIFACT_ROOT=${{ secrets.MLFLOW_ARTIFACT_ROOT }}
        MLFLOW_S3_ENDPOINT_URL=${{ secrets.MLFLOW_S3_ENDPOINT_URL }}
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}
        EOF
        
        echo "🧪 Testing Docker image..."
        docker run --rm -d --name test-container -p 8501:8501 \
          -e ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }} \
          -e MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }} \
          -e MLFLOW_ARTIFACT_ROOT=${{ secrets.MLFLOW_ARTIFACT_ROOT }} \
          -e MLFLOW_S3_ENDPOINT_URL=${{ secrets.MLFLOW_S3_ENDPOINT_URL }} \
          -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          -e AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }} \
          -e CONTAINER_PORT=8501 \
          -e DEBUG=false \
          -e ENVIRONMENT=production \
          openstack-rca-system:${{ github.sha }}
        
        echo "⏳ Waiting for container to start..."
        sleep 30
        
        echo "🔍 Checking container health..."
        curl -f http://localhost:8501/_stcore/health || echo "Health check failed"
        
        echo "🛑 Stopping test container..."
        docker stop test-container
        
        echo "✅ Docker image test completed"
        
    - name: Push Docker image
      run: |
        echo "📤 Pushing Docker image to Docker Hub..."
        docker tag openstack-rca-system:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/openstack-rca-system:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/openstack-rca-system:${{ github.sha }}
        
        echo "✅ Docker image pushed successfully"
        
    - name: Upload Docker artifacts
      uses: actions/upload-artifact@v4
      with:
        name: docker-artifacts
        path: |
          docker-image-info.json
          Dockerfile
        retention-days: 7
        
    - name: Create Docker summary
      run: |
        echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Completed:" >> $GITHUB_STEP_SUMMARY
        echo "- Docker image built successfully" >> $GITHUB_STEP_SUMMARY
        echo "- Image tested locally" >> $GITHUB_STEP_SUMMARY
        echo "- Image pushed to Docker Hub" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Image Details:" >> $GITHUB_STEP_SUMMARY
        echo "- Image: ${{ secrets.DOCKER_USERNAME }}/openstack-rca-system:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- Tag: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- Status: Ready for deployment" >> $GITHUB_STEP_SUMMARY

  deploy-infrastructure:
    name: Deploy to ECS/EC2 Infrastructure
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    env:
      ECS_CLUSTER: openstack-rca-cluster
      ECS_SERVICE: openstack-rca-service
      ECS_TASK_DEFINITION: openstack-rca-task
      ECS_CONTAINER_NAME: openstack-rca-container
      ECS_CONTAINER_PORT: 8501
      ECS_CPU: 256
      ECS_MEMORY: 512
      ECS_DESIRED_COUNT: 1
      ECS_MIN_COUNT: 1
      ECS_MAX_COUNT: 3
      ECS_CAPACITY_PROVIDER: openstack-rca-capacity-provider
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
        
    - name: Download test artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-results
        path: ./test-results/
        
    - name: Download Docker artifacts
      uses: actions/download-artifact@v4
      with:
        name: docker-artifacts
        path: ./docker-artifacts/
        
    - name: Set up environment variables
      run: |
        echo "DOCKER_IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
        echo "DOCKER_IMAGE_URI=${{ secrets.DOCKER_USERNAME }}/openstack-rca-system:${{ github.sha }}" >> $GITHUB_ENV
        
    - name: Create Auto Scaling Group
      run: |
        echo "🔧 Creating Auto Scaling Group for ECS EC2 instances..."
        
        # Create launch template
        aws ec2 create-launch-template \
          --launch-template-name openstack-rca-lt \
          --version-description "OpenStack RCA ECS Launch Template" \
          --launch-template-data '{
            "ImageId": "ami-0c02fb55956c7d316",
            "InstanceType": "t3.medium",
            "KeyName": "'${{ secrets.EC2_KEY_NAME }}'",
            "SecurityGroupIds": ["'${{ secrets.ECS_SECURITY_GROUP_IDS }}'"],
            "SubnetId": "'${{ secrets.ECS_SUBNET_IDS }}'",
            "UserData": "#!/bin/bash\necho ECS_CLUSTER='${{ env.ECS_CLUSTER }}' >> /etc/ecs/ecs.config\necho ECS_ENABLE_TASK_ENI=true >> /etc/ecs/ecs.config\necho ECS_ENABLE_TASK_IAM_ROLE=true >> /etc/ecs/ecs.config\necho ECS_ENABLE_TASK_ENI=true >> /etc/ecs/ecs.config\nsystemctl restart ecs",
            "IamInstanceProfile": {
              "Name": "ecsInstanceRole"
            },
            "BlockDeviceMappings": [
              {
                "DeviceName": "/dev/xvda",
                "Ebs": {
                  "VolumeSize": 30,
                  "VolumeType": "gp3",
                  "DeleteOnTermination": true
                }
              }
            ]
          }'
        
        echo "✅ Launch template created successfully"
        
        # Create Auto Scaling Group
        aws autoscaling create-auto-scaling-group \
          --auto-scaling-group-name openstack-rca-asg \
          --launch-template LaunchTemplateName=openstack-rca-lt,Version='$Latest' \
          --min-size 1 \
          --max-size 3 \
          --desired-capacity 1 \
          --vpc-zone-identifier ${{ secrets.ECS_SUBNET_IDS }} \
          --tags ResourceId=openstack-rca-asg,ResourceType=auto-scaling-group,Key=Name,Value=OpenStack-RCA-ECS-ASG,PropagateAtLaunch=true
        
        echo "✅ Auto Scaling Group created successfully"
        
    - name: Create ECS cluster with EC2 capacity provider
      run: |
        echo "🔧 Creating ECS cluster with EC2 capacity provider: ${{ env.ECS_CLUSTER }}"
        
        # Create cluster
        aws ecs create-cluster \
          --cluster-name ${{ env.ECS_CLUSTER }} \
          --capacity-providers ${{ env.ECS_CAPACITY_PROVIDER }} \
          --default-capacity-provider-strategy capacityProvider=${{ env.ECS_CAPACITY_PROVIDER }},weight=1 \
          --tags Key=Project,Value=OpenStack-RCA Key=Environment,Value=Production
        
        echo "✅ ECS cluster created successfully"
        
        # Create capacity provider
        aws ecs create-capacity-provider \
          --name ${{ env.ECS_CAPACITY_PROVIDER }} \
          --auto-scaling-group-provider autoScalingGroupArn=arn:aws:autoscaling:${{ secrets.AWS_DEFAULT_REGION }}:$(aws sts get-caller-identity --query Account --output text):autoScalingGroup:*:autoScalingGroupName/openstack-rca-asg,managedScaling={status=ENABLED,targetCapacity=100,minimumScalingStepSize=1,maximumScalingStepSize=10000},managedTerminationProtection=DISABLED
        
        echo "✅ Capacity provider created successfully"
        
    - name: Create task definition for EC2
      run: |
        echo "📋 Creating ECS task definition for EC2..."
        
        cat > task-definition.json << EOF
        {
          "family": "${{ env.ECS_TASK_DEFINITION }}",
          "networkMode": "bridge",
          "requiresCompatibilities": ["EC2"],
          "cpu": "${{ env.ECS_CPU }}",
          "memory": "${{ env.ECS_MEMORY }}",
          "executionRoleArn": "arn:aws:iam::${AWS_ACCOUNT_ID}:role/ecsTaskExecutionRole",
          "taskRoleArn": "arn:aws:iam::${AWS_ACCOUNT_ID}:role/ecsTaskRole",
          "containerDefinitions": [
            {
              "name": "${{ env.ECS_CONTAINER_NAME }}",
              "image": "${{ env.DOCKER_IMAGE_URI }}",
              "portMappings": [
                {
                  "containerPort": ${{ env.ECS_CONTAINER_PORT }},
                  "hostPort": ${{ env.ECS_CONTAINER_PORT }},
                  "protocol": "tcp"
                }
              ],
              "environment": [
                {"name": "ANTHROPIC_API_KEY", "value": "${{ secrets.ANTHROPIC_API_KEY }}"},
                {"name": "MLFLOW_TRACKING_URI", "value": "${{ secrets.MLFLOW_TRACKING_URI }}"},
                {"name": "MLFLOW_ARTIFACT_ROOT", "value": "${{ secrets.MLFLOW_ARTIFACT_ROOT }}"},
                {"name": "MLFLOW_S3_ENDPOINT_URL", "value": "${{ secrets.MLFLOW_S3_ENDPOINT_URL }}"},
                {"name": "AWS_ACCESS_KEY_ID", "value": "${{ secrets.AWS_ACCESS_KEY_ID }}"},
                {"name": "AWS_SECRET_ACCESS_KEY", "value": "${{ secrets.AWS_SECRET_ACCESS_KEY }}"},
                {"name": "AWS_DEFAULT_REGION", "value": "${{ secrets.AWS_DEFAULT_REGION }}"},
                {"name": "CONTAINER_PORT", "value": "${{ env.ECS_CONTAINER_PORT }}"},
                {"name": "DEBUG", "value": "false"},
                {"name": "ENVIRONMENT", "value": "production"}
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/${{ env.ECS_CLUSTER }}",
                  "awslogs-region": "${{ secrets.AWS_DEFAULT_REGION }}",
                  "awslogs-stream-prefix": "ecs"
                }
              },
              "healthCheck": {
                "command": ["CMD-SHELL", "curl -f http://localhost:${{ env.ECS_CONTAINER_PORT }}/_stcore/health || exit 1"],
                "interval": 30,
                "timeout": 5,
                "retries": 3,
                "startPeriod": 60
              },
              "essential": true
            }
          ]
        }
        EOF
        
        echo "📄 Task definition created:"
        cat task-definition.json
        
    - name: Register task definition
      run: |
        echo "📝 Registering task definition..."
        aws ecs register-task-definition --cli-input-json file://task-definition.json
        
        echo "✅ Task definition registered successfully"
        
    - name: Create CloudWatch log group
      run: |
        echo "📊 Creating CloudWatch log group..."
        aws logs create-log-group --log-group-name "/ecs/${{ env.ECS_CLUSTER }}" || echo "Log group already exists"
        
        echo "✅ CloudWatch log group ready"
        
    - name: Deploy to ECS
      run: |
        echo "🚀 Deploying to ECS with EC2 launch type..."
        
        # Check if service exists
        if aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query 'services[0].status' --output text 2>/dev/null | grep -q ACTIVE; then
          echo "🔄 Updating existing ECS service..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --force-new-deployment
        else
          echo "🆕 Creating new ECS service with EC2 launch type..."
          aws ecs create-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --desired-count ${{ env.ECS_DESIRED_COUNT }} \
            --launch-type EC2 \
            --deployment-configuration maximumPercent=200,minimumHealthyPercent=50 \
            --placement-constraints type=distinctInstance,expression="attribute:ecs.availability-zone" \
            --placement-strategy type=spread,field=attribute:ecs.availability-zone
        fi
        
        echo "✅ ECS service deployed successfully"
        
    - name: Wait for deployment
      run: |
        echo "⏳ Waiting for deployment to stabilize..."
        
        # Wait for service to be stable
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }}
        
        echo "✅ Deployment stabilized"
        
    - name: Get service status
      run: |
        echo "📊 Service Status:"
        aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount,TaskDefinition:taskDefinition}' \
          --output table
        
    - name: Get EC2 instances and endpoints
      run: |
        echo "🖥️ EC2 Instances:"
        aws ec2 describe-instances \
          --filters "Name=tag:aws:autoscaling:groupName,Values=openstack-rca-asg" "Name=instance-state-name,Values=running" \
          --query 'Reservations[*].Instances[*].[InstanceId,PublicIpAddress,PrivateIpAddress,State.Name]' \
          --output table
        
        echo "🌐 Service Endpoints:"
        echo "ECS Cluster: ${{ env.ECS_CLUSTER }}"
        echo "ECS Service: ${{ env.ECS_SERVICE }}"
        echo "Container Port: ${{ env.ECS_CONTAINER_PORT }}"
        echo "Launch Type: EC2"
        echo ""
        echo "📋 To access the application:"
        echo "1. Get the public IP from EC2 instances above"
        echo "2. Access: http://<public-ip>:${{ env.ECS_CONTAINER_PORT }}"
        echo ""
        echo "🔍 Get task details:"
        aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }}
        
    - name: Create deployment summary
      run: |
        echo "## 🚀 ECS EC2 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ All Pipeline Steps Completed:" >> $GITHUB_STEP_SUMMARY
        echo "1. ✅ Model training and MLflow deployment" >> $GITHUB_STEP_SUMMARY
        echo "2. ✅ RCA and RAG testing" >> $GITHUB_STEP_SUMMARY
        echo "3. ✅ Docker image build and push" >> $GITHUB_STEP_SUMMARY
        echo "4. ✅ ECS EC2 infrastructure deployment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏗️ Infrastructure Details:" >> $GITHUB_STEP_SUMMARY
        echo "- ECS Cluster: ${{ env.ECS_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
        echo "- ECS Service: ${{ env.ECS_SERVICE }}" >> $GITHUB_STEP_SUMMARY
        echo "- Task Definition: ${{ env.ECS_TASK_DEFINITION }}" >> $GITHUB_STEP_SUMMARY
        echo "- Container: ${{ env.ECS_CONTAINER_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- Launch Type: EC2" >> $GITHUB_STEP_SUMMARY
        echo "- Auto Scaling Group: openstack-rca-asg" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 Configuration:" >> $GITHUB_STEP_SUMMARY
        echo "- CPU: ${{ env.ECS_CPU }} units" >> $GITHUB_STEP_SUMMARY
        echo "- Memory: ${{ env.ECS_MEMORY }} MB" >> $GITHUB_STEP_SUMMARY
        echo "- Port: ${{ env.ECS_CONTAINER_PORT }}" >> $GITHUB_STEP_SUMMARY
        echo "- Desired Count: ${{ env.ECS_DESIRED_COUNT }}" >> $GITHUB_STEP_SUMMARY
        echo "- Instance Type: t3.medium" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Production Resources:" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Image: ${{ env.DOCKER_IMAGE_URI }}" >> $GITHUB_STEP_SUMMARY
        echo "- MLflow Model: ${{ secrets.MLFLOW_ARTIFACT_ROOT }}" >> $GITHUB_STEP_SUMMARY
        echo "- CloudWatch Logs: /ecs/${{ env.ECS_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
        echo "- Launch Template: openstack-rca-lt" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Application Status:" >> $GITHUB_STEP_SUMMARY
        echo "- Status: Deployed to AWS ECS (EC2)" >> $GITHUB_STEP_SUMMARY
        echo "- Environment: Production" >> $GITHUB_STEP_SUMMARY
        echo "- Health Check: Active" >> $GITHUB_STEP_SUMMARY
        echo "- Service URL: Available via EC2 public IP" >> $GITHUB_STEP_SUMMARY 
